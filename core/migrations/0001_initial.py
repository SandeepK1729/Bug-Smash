# Generated by Django 4.1.7 on 2023-03-11 19:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="Username",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "mobile_number",
                    models.CharField(
                        help_text="Enter 10 digit phone number only",
                        max_length=10,
                        unique=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                ("college_name", models.CharField(max_length=40)),
                (
                    "department",
                    models.CharField(
                        help_text="Enter in <b>Short form in Capital Letter</b>",
                        max_length=10,
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        choices=[
                            ("1st Year", "1st Year"),
                            ("2nd Year", "2nd Year"),
                            ("3rd Year", "3rd Year"),
                            ("4th Year", "4th Year"),
                        ],
                        default="1st Year",
                        max_length=10,
                    ),
                ),
                (
                    "transaction_ss",
                    models.ImageField(
                        upload_to="participant/transactions/screenshots",
                        verbose_name="Transaction Screenshort",
                    ),
                ),
                ("transaction_id", models.CharField(max_length=30, unique=True)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=False, verbose_name="active"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "question_name",
                    models.CharField(
                        help_text="please use following format, ex : <em> Q1 </em>",
                        max_length=10,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("question_detail", models.ImageField(upload_to="question_codes/")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("MCQ", "Multiple Choice Question"),
                            ("SCQ", "Single Choice Question"),
                            ("SAQ", "Short Answer Question"),
                        ],
                        default="MCQ",
                        max_length=30,
                    ),
                ),
                (
                    "all_options",
                    models.CharField(
                        blank=True, help_text="give separated values", max_length=300
                    ),
                ),
                (
                    "correct_options",
                    models.CharField(help_text="give separated values", max_length=300),
                ),
                ("positive_score", models.IntegerField(default=0)),
                ("negative_score", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="Test",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_name",
                    models.CharField(
                        help_text="give full abbrevation of your test",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        help_text="Date time format YYYY-MM-DD HH-MM-SS",
                        verbose_name="Test Starting time",
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        help_text="Date time format YYYY-MM-DD HH-MM-SS",
                        verbose_name="Test Ending time",
                    ),
                ),
                ("questions", models.ManyToManyField(to="core.question")),
            ],
        ),
        migrations.CreateModel(
            name="TestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("score", models.IntegerField(default=0)),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="core.test",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_answer", models.CharField(blank=True, max_length=300)),
                ("score", models.IntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.question"
                    ),
                ),
                (
                    "test_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="core.testresult",
                    ),
                ),
            ],
        ),
    ]
